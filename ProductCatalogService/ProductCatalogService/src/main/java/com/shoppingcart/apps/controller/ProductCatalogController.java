package com.shoppingcart.apps.controller;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.shoppingcart.apps.entity.Product;
import com.shoppingcart.apps.model.ProductInfo;
import com.shoppingcart.apps.repository.ProductRepository;

@Controller
//@RequestMapping("/api/login")
public class ProductCatalogController {

	// private static final String template = "Hello, %s!";
	// private final AtomicLong counter = new AtomicLong();

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ProductRepository productRepository;


	// GET: Show product.
	@RequestMapping(value = { "/api/product" }, method = RequestMethod.GET)
	public  @ResponseBody ProductInfo product(Model model, @RequestParam(value = "code", defaultValue = "") String code) {
		ProductInfo productInfo = null;
		Product product = null;

		if (code != null && code.length() > 0) {
			product = productRepository.findOne(code);
		}
		if (product != null) {
			productInfo = new ProductInfo();
			productInfo.setCode(product.getCode());
			productInfo.setName(product.getName());
			productInfo.setPrice(product.getPrice());	            
			productInfo.setNewProduct(true);
		}		
		return productInfo;
	}

	@RequestMapping(value = { "/api/productList" }, method = RequestMethod.GET)
	public  @ResponseBody List<Product> getProducts(HttpServletRequest request,Model model) {	        

		List<Product> products= (List<Product>) productRepository.findAllProducts();
		System.out.println("Product at 0"+products.get(0));
		//model.addAttribute("paginationProducts", result);
		return products;
	}

	@RequestMapping(value = { "/api/productImage" }, method = RequestMethod.GET)
	public @ResponseBody byte[] productImage(HttpServletRequest request, HttpServletResponse response, Model model,
			@RequestParam("code") String code) throws IOException {
		Product product = null;
		if (code != null) {
			product = productRepository.findOne(code);
		}
		response.setContentType("application/json;charset=UTF-8");
		
		if(product!=null){
			return product.getImage();
		}
		
		return "".getBytes();
		
	}

	@RequestMapping(value = { "/api/saveProduct" }, method = RequestMethod.POST)
	public @ResponseBody String saveProduct(HttpServletRequest request, HttpServletResponse response,
			@RequestParam("code") String code,
			@RequestParam("name") String name,
			@RequestParam("price") String price,
			@RequestParam("fileData") CommonsMultipartFile fileData) throws IOException {
		System.out.println("Calling saveProduct ");
		//String code = productInfo.getCode();
		Product product = null;
		boolean isNew = false;
		
		if (code != null) {
			product = productRepository.findOne(code);
		}
		System.out.println("product= "+product);
		if (product == null) {
			isNew = true;
            product = new Product();
            product.setCreateDate(new Date());
		}
		product.setCode(code);
        product.setName(name);
        product.setPrice(Double.parseDouble(price));
        if (fileData != null) {
            byte[] image = fileData.getBytes();
            if (image != null && image.length > 0) {
                product.setImage(image);
            }
            System.out.println("Image size="+image.length);
        }
        System.out.println("Product size="+product);
        if (isNew) {
            productRepository.save(product);
        }
		response.setContentType("application/json;charset=UTF-8");
		
		return "Success";
		
	}


}
